// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Viv2.API.Infrastructure.DataStore.EfNpgSql.Contexts;

namespace Viv2.API.Infrastructure.DataStore.EfNpgSql.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210415212600_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "en_US.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("EnvironmentUser", b =>
                {
                    b.Property<Guid>("EnvironmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("EnvironmentsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("EnvironmentUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.Controller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Controllers");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.EnvDataSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Captured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("(NOW() AT TIME ZONE 'utc')");

                    b.Property<double?>("ColdGlass")
                        .HasColumnType("double precision");

                    b.Property<double?>("ColdMat")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("EnvironmentId")
                        .HasColumnType("uuid");

                    b.Property<double?>("HotGlass")
                        .HasColumnType("double precision");

                    b.Property<double?>("HotMat")
                        .HasColumnType("double precision");

                    b.Property<double?>("MidGlass")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("EnvDataSamples");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.Environment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackedUserId")
                        .HasColumnType("text");

                    b.Property<Guid?>("ControllerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Descr")
                        .HasColumnType("text");

                    b.Property<int?>("InhabitantId")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BackedUserId");

                    b.HasIndex("ControllerId");

                    b.HasIndex("InhabitantId");

                    b.ToTable("Environment");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BackedUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("HatchDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Morph")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BackedUserId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("AccessCapacity")
                        .HasColumnType("text");

                    b.Property<string>("BackedUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("IssuedTo")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Token");

                    b.HasIndex("BackedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Viv2.API.Infrastructure.DataStore.EfNpgSql.Entities.BackedUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EnvironmentUser", b =>
                {
                    b.HasOne("Viv2.API.Core.Entities.Environment", null)
                        .WithMany()
                        .HasForeignKey("EnvironmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Viv2.API.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Viv2.API.Infrastructure.DataStore.EfNpgSql.Entities.BackedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Viv2.API.Infrastructure.DataStore.EfNpgSql.Entities.BackedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Viv2.API.Infrastructure.DataStore.EfNpgSql.Entities.BackedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Viv2.API.Infrastructure.DataStore.EfNpgSql.Entities.BackedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.EnvDataSample", b =>
                {
                    b.HasOne("Viv2.API.Core.Entities.Environment", "Environment")
                        .WithMany("EnvDataSamples")
                        .HasForeignKey("EnvironmentId");

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.Environment", b =>
                {
                    b.HasOne("Viv2.API.Infrastructure.DataStore.EfNpgSql.Entities.BackedUser", null)
                        .WithMany("Environments")
                        .HasForeignKey("BackedUserId");

                    b.HasOne("Viv2.API.Core.Entities.Controller", "Controller")
                        .WithMany("Environments")
                        .HasForeignKey("ControllerId");

                    b.HasOne("Viv2.API.Core.Entities.Pet", "Inhabitant")
                        .WithMany()
                        .HasForeignKey("InhabitantId");

                    b.Navigation("Controller");

                    b.Navigation("Inhabitant");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.Pet", b =>
                {
                    b.HasOne("Viv2.API.Infrastructure.DataStore.EfNpgSql.Entities.BackedUser", null)
                        .WithMany("Pets")
                        .HasForeignKey("BackedUserId");

                    b.HasOne("Viv2.API.Core.Entities.Species", "Species")
                        .WithMany("Pets")
                        .HasForeignKey("SpeciesId");

                    b.HasOne("Viv2.API.Core.Entities.User", null)
                        .WithMany("Pets")
                        .HasForeignKey("UserId");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("Viv2.API.Infrastructure.DataStore.EfNpgSql.Entities.BackedUser", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("BackedUserId");

                    b.HasOne("Viv2.API.Core.Entities.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.Controller", b =>
                {
                    b.Navigation("Environments");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.Environment", b =>
                {
                    b.Navigation("EnvDataSamples");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.Species", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Viv2.API.Core.Entities.User", b =>
                {
                    b.Navigation("Pets");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Viv2.API.Infrastructure.DataStore.EfNpgSql.Entities.BackedUser", b =>
                {
                    b.Navigation("Environments");

                    b.Navigation("Pets");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
